/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import Model.Atleta;
import Model.Esporte;
import Model.EsporteColetivo;
import Model.EsporteIndividual;
import Model.Time;
import Model.TorneioColetivo;
import Model.TorneioIndividual;
import control.AtletaTableModel;
import control.FuncoesUteis;
import control.GerenciadorInterfaceGrafica;
import control.TimeTableModel;
import java.awt.Color;
import java.awt.HeadlessException;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import org.hibernate.Hibernate;

/**
 *
 * @author 2022122760265
 */
public class DlgCadTorneio extends javax.swing.JDialog {

    
    private AtletaTableModel tableAtletaModel;
    private AtletaTableModel tableAtletaModel2;
    private TimeTableModel tableTimeModel;
    TorneioColetivo torneioColetivo;
    TorneioIndividual torneioIndividual;

    /**
     * Creates new form DlgCadTorneio
     */
    public DlgCadTorneio(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        pnlinscreveratletas.setVisible(false);
        pnlcadastrartimes.setVisible(false);
        pnlstatus.setVisible(false);
                GerenciadorInterfaceGrafica.getMyInstance().carregarComboDuasClasses(cmbEsporte, EsporteColetivo.class, EsporteIndividual.class);

        
        //Associar a tableModel
        tableAtletaModel = new AtletaTableModel();
        tableAtletaModel2 = new AtletaTableModel();
        tableTimeModel = new TimeTableModel();
        tabelaInscritos.setModel( tableAtletaModel );
        tabelaAtletas.setModel(tableAtletaModel2);
        tableTimes.setModel(tableTimeModel);
        
        btnResultados.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grptipo = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtTitulo = new javax.swing.JLabel();
        pnlinscreveratletas = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaInscritos = new javax.swing.JTable();
        lblAtletas = new javax.swing.JLabel();
        pnlcadastrartimes = new javax.swing.JPanel();
        lblCadastroTimes = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbNacionalidade = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        btnGerar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaAtletas = new javax.swing.JTable();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        adicionarTime = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTimes = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        lblEsporte = new javax.swing.JLabel();
        cmbEsporte = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        radioIndividual = new javax.swing.JRadioButton();
        radioColetivo = new javax.swing.JRadioButton();
        lblLocal = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        txtDt = new javax.swing.JFormattedTextField();
        txtLocal = new javax.swing.JTextField();
        pnlstatus = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();
        txtStatus = new javax.swing.JLabel();
        btnResultados = new javax.swing.JToggleButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastrar Torneio");

        txtTitulo.setFont(new java.awt.Font("Segoe UI Semilight", 3, 18)); // NOI18N
        txtTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTitulo.setText("Cadastro de Torneio");
        txtTitulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        tabelaInscritos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Nacionalidade", "Sexo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaInscritos);

        lblAtletas.setText("Atletas inscritos");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(lblAtletas)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAtletas, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlinscreveratletasLayout = new javax.swing.GroupLayout(pnlinscreveratletas);
        pnlinscreveratletas.setLayout(pnlinscreveratletasLayout);
        pnlinscreveratletasLayout.setHorizontalGroup(
            pnlinscreveratletasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlinscreveratletasLayout.setVerticalGroup(
            pnlinscreveratletasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlinscreveratletasLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlcadastrartimes.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblCadastroTimes.setText("Cadastro de Times");

        jLabel7.setText("Nacionalidade: ");

        cmbNacionalidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Afeganistão", "Albânia", "Andorra", "Angola", "Antígua e Barbuda", "Argélia", "Argentina", "Armênia", "Austrália", "Áustria", "Azerbaijão", "Bahamas", "Bahrein", "Barbados", "Bélgica", "Bielorrússia", "Bósnia e Herzegovina", "Botsuana", "Bolívia", "Botswana", "Brasil", "Brunei", "Bulgária", "Butão", "Cabo Verde", "Camarões", "Cazaquistão", "Cambodja", "Canadá", "Chile", "China", "Chipre", "Colômbia", "Comores", "Congo, República do", "Congo, República Democrática do", "Costa do Marfim", "Croácia", "Cuba", "Dinamarca", "Dominica", "Egito", "El Salvador", "Emirados Árabes Unidos", "Equador", "Eritreia", "Essuatíni (Suazilândia)", "Espanha", "Estados Unidos", "Estônia", "Etiópia", "Fiji", "Filipinas", "Finlândia", "França", "Gabão", "Gâmbia", "Gana", "Geórgia", "Granada", "Guiana", "Guiana Francesa", "Haiti", "Honduras", "Hong Kong", "Hungria", "Islândia", "Índia", "Indonésia", "Irã", "Iraque", "Irlanda", "Israel", "Itália", "Jamaica", "Japão", "Jordânia", "Kuwait", "Laos", "Líbano", "Libéria", "Lituânia", "Luxemburgo", "Macedônia do Norte", "Madagáscar", "Malásia", "Malavi", "Maldivas", "Marrocos", "Mauritânia", "Maurícias", "México", "Micronésia", "Mongólia", "Montenegro", "Moçambique", "Mônaco", "Myanmar (Birmânia)", "Namíbia", "Nauru", "Nepal", "Nicarágua", "Nigéria", "Noruega", "Nova Zelândia", "Omã", "Paquistão", "Palau", "Panamá", "Papua Nova Guiné", "Paraguai", "Peru", "Polônia", "Portugal", "Quênia", "Qatar", "República Centro-Africana", "República Checa", "Romênia", "Ruanda", "São Cristóvão e Nevis", "São Tomé e Príncipe", "Senegal", "Serra Leoa", "Síria", "Singapura", "Sri Lanka", "Suécia", "Suíça", "Suriname", "Tajiquistão", "Tanzânia", "Tailândia", "Tonga", "Turcomenistão", "Turquia", "Tuvalu", "Ucrânia", "Uzbequistão", "Vanuatu", "Venezuela", "Vietnã", "Zâmbia", "Zimbábue" }));

        jLabel8.setText("Atletas:");

        btnGerar.setText("Gerar time");
        btnGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarActionPerformed(evt);
            }
        });

        tabelaAtletas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Atletas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabelaAtletas);

        lblNome.setText("Nome:");

        adicionarTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/png/16x16/add.png"))); // NOI18N
        adicionarTime.setText("Adicionar Time");
        adicionarTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarTimeActionPerformed(evt);
            }
        });

        tableTimes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tableTimes);

        javax.swing.GroupLayout pnlcadastrartimesLayout = new javax.swing.GroupLayout(pnlcadastrartimes);
        pnlcadastrartimes.setLayout(pnlcadastrartimesLayout);
        pnlcadastrartimesLayout.setHorizontalGroup(
            pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                        .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                                .addComponent(lblCadastroTimes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                                .addComponent(jLabel8))
                            .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                                .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbNacionalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnGerar)
                                    .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                                        .addComponent(lblNome)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(adicionarTime))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlcadastrartimesLayout.setVerticalGroup(
            pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pnlcadastrartimesLayout.createSequentialGroup()
                        .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCadastroTimes)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cmbNacionalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlcadastrartimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNome)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGerar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adicionarTime)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblEsporte.setText("Esporte:");

        cmbEsporte.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                cmbEsporteComponentShown(evt);
            }
        });
        cmbEsporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEsporteActionPerformed(evt);
            }
        });

        jLabel4.setText("Tipo de torneio:");

        grptipo.add(radioIndividual);
        radioIndividual.setText("Individual");
        radioIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioIndividualActionPerformed(evt);
            }
        });

        grptipo.add(radioColetivo);
        radioColetivo.setText("Coletivo");
        radioColetivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioColetivoActionPerformed(evt);
            }
        });

        lblLocal.setText("Local:");

        lblData.setText("Data:");

        try {
            txtDt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblEsporte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEsporte, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(radioIndividual)
                        .addGap(18, 18, 18)
                        .addComponent(radioColetivo)))
                .addGap(63, 63, 63)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDt))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblLocal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLocal, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEsporte)
                    .addComponent(cmbEsporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocal)
                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(radioIndividual)
                    .addComponent(radioColetivo)
                    .addComponent(lblData)
                    .addComponent(txtDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pnlstatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Status torneio"));

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/png/16x16/remove.png"))); // NOI18N
        btnCancelar.setText("Cancelar Torneio");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnIniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/png/16x16/accept.png"))); // NOI18N
        btnIniciar.setText("Iniciar Torneio");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        txtStatus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtStatus.setText("- NÃO INICIADO -");

        btnResultados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/png/16x16/down.png"))); // NOI18N
        btnResultados.setText("Visualizar Resultados");
        btnResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlstatusLayout = new javax.swing.GroupLayout(pnlstatus);
        pnlstatus.setLayout(pnlstatusLayout);
        pnlstatusLayout.setHorizontalGroup(
            pnlstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlstatusLayout.createSequentialGroup()
                .addComponent(btnCancelar)
                .addGap(70, 70, 70)
                .addComponent(btnResultados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnIniciar))
            .addComponent(txtStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlstatusLayout.setVerticalGroup(
            pnlstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlstatusLayout.createSequentialGroup()
                .addComponent(txtStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(pnlstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnIniciar)
                    .addComponent(btnResultados)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlinscreveratletas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlcadastrartimes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlstatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlinscreveratletas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlcadastrartimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResultadosActionPerformed
        //GerenciadorInterfaceGrafica.getMyInstance().abrirResultado();
        Esporte esporteSelecionado = (Esporte) cmbEsporte.getSelectedItem();

        DlgResultado dlgResultado = new DlgResultado(null, true, esporteSelecionado, torneioColetivo, torneioIndividual);
        dlgResultado.setVisible(true);
    }//GEN-LAST:event_btnResultadosActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void radioIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioIndividualActionPerformed

    }//GEN-LAST:event_radioIndividualActionPerformed

    private void radioColetivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioColetivoActionPerformed

    }//GEN-LAST:event_radioColetivoActionPerformed

    private void btnGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarActionPerformed
        // Vai pegar todos os atletas da nacionalidade escolhida e que sejam do esporte e jogar em um time
        EsporteColetivo esporteSelecionado = (EsporteColetivo) cmbEsporte.getSelectedItem();
        String nacionalidade = (String) cmbNacionalidade.getSelectedItem();
                
        List<Atleta> lista = esporteSelecionado.getAtletaNacionalidade(nacionalidade);
        tableAtletaModel2.setLista(lista);       
    }//GEN-LAST:event_btnGerarActionPerformed

    private void cmbEsporteComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_cmbEsporteComponentShown
        GerenciadorInterfaceGrafica.getMyInstance().carregarCombo(cmbEsporte, Esporte.class);
    }//GEN-LAST:event_cmbEsporteComponentShown

    private void cmbEsporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEsporteActionPerformed
        Esporte esporteSelecionado = (Esporte) cmbEsporte.getSelectedItem();
        tableAtletaModel.setLista(esporteSelecionado.getAtletas());
        
        switch (esporteSelecionado.getTipo()) {
            case "Individual" -> {
                radioIndividual.setSelected(rootPaneCheckingEnabled);
                pnlcadastrartimes.setVisible(false);
                pnlinscreveratletas.setVisible(true);
                pnlstatus.setVisible(true);
            }
            case "Coletivo" -> {
                radioColetivo.setSelected(rootPaneCheckingEnabled);
                pnlinscreveratletas.setVisible(true);
                pnlcadastrartimes.setVisible(true);
                pnlstatus.setVisible(true);
                
                List<Time> lista = GerenciadorInterfaceGrafica.getMyInstance().getGerDom().listarTimes((EsporteColetivo)esporteSelecionado);
                tableTimeModel.setLista(lista);
            }
            default -> JOptionPane.showMessageDialog(this, "Esse esporte não tem tipo");
        }
    }//GEN-LAST:event_cmbEsporteActionPerformed

    private boolean validarCamposTime() {
        
        String msgErro = "";

       // Resetar cores dos labels
       lblNome.setForeground(Color.black);
       

       // Validar nome
       if (txtNome.getText().trim().isEmpty()) {
           msgErro += "Digite o nome.\n";
           lblNome.setForeground(Color.red);
       }

       // Exibir mensagens de erro ou retornar verdadeiro
       if (msgErro.isEmpty()) {
           return true;
       } else {
           JOptionPane.showMessageDialog(this, msgErro, "Erro de Validação", JOptionPane.ERROR_MESSAGE);
           return false;
       }
        
    }
    
    private void limparCamposTime() {
            txtNome.setText( "" );
            cmbNacionalidade.setSelectedIndex(0);
            tabelaAtletas.clearSelection();
    }

    
    private void txtDtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDtActionPerformed

    private void adicionarTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarTimeActionPerformed
        // Vai pegar todos os atletas da nacionalidade escolhida e que sejam do esporte e jogar em um time
        EsporteColetivo esporteSelecionado = (EsporteColetivo) cmbEsporte.getSelectedItem();
        String nacionalidade = (String) cmbNacionalidade.getSelectedItem();
        String nome = txtNome.getText();
                
        List<Atleta> lista = tableAtletaModel2.getListaAtletas();
        
        if( validarCamposTime() ){
            try{
                int id = GerenciadorInterfaceGrafica.getMyInstance().getGerDom().inserirTime(nome, nacionalidade, lista, esporteSelecionado);

                JOptionPane.showMessageDialog(this, "Time " + id + " inserido com sucesso." );
                limparCamposTime();
                
                List<Time> listaTime = GerenciadorInterfaceGrafica.getMyInstance().getGerDom().listarTimes((EsporteColetivo)esporteSelecionado);
                tableTimeModel.setLista(listaTime);
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex, "ERRO Atleta", JOptionPane.ERROR_MESSAGE  );
            }
        }
                    }//GEN-LAST:event_adicionarTimeActionPerformed

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        Esporte esporteSelecionado = (Esporte) cmbEsporte.getSelectedItem();
        String local = txtLocal.getText();
        String data = txtDt.getText();
        List<Time> times = tableTimeModel.getListaTimes();
        List<Atleta> atletas = tableAtletaModel.getListaAtletas();        
        
        if ( validarCampos(esporteSelecionado, times, atletas) ) {
            // INSERIR NO BANCO
            try {
                if(esporteSelecionado.getTipo().equals("Coletivo")){
                    //Carrega o resultado do torneio
                    Map<Time, Integer> resultado = carregarResultado(times);
                    adicionarMedalhasColetivo(resultado);
                    
                    // INSERIR COLETIVO
                    torneioColetivo = new TorneioColetivo((EsporteColetivo)esporteSelecionado, data, local, times, resultado);
                    GerenciadorInterfaceGrafica.getMyInstance().getGerDom().inserirTorneioColetivo(torneioColetivo);

                    JOptionPane.showMessageDialog(this, "Torneio Coletivo inserido com sucesso." );
                }else{
                    Map<Atleta, Integer> resultado = carregarResultado(atletas);
                    adicionarMedalhasIndividual(resultado);
                    
                    // INSERIR INDIVIDUAL
                    torneioIndividual = new TorneioIndividual((EsporteIndividual)esporteSelecionado, data, local, atletas, resultado);
                    GerenciadorInterfaceGrafica.getMyInstance().getGerDom().inserirTorneioIndividual(torneioIndividual);

                    JOptionPane.showMessageDialog(this, "Torneio Individual inserido com sucesso." );
                }
                
                btnResultados.setVisible(true);
                txtStatus.setText("-CONCLUIDO-");
                btnIniciar.setVisible(false);
                btnCancelar.setText("Sair");
            }
            catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex, "ERRO Atleta", JOptionPane.ERROR_MESSAGE  );
            }
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    private <Object> Map<Object, Integer> carregarResultado(List<Object> lista){
        // Criar o mapa para armazenar o resultado
        Map<Object, Integer> resultado = new HashMap<>();
        
        // Embaralhar aleatoriamente a lista de times
        Collections.shuffle(lista);
        
        // Atribuir a colocação de 1 até N
        for (int i = 0; i < lista.size(); i++) {
            Object obj = lista.get(i);
            resultado.put(obj, i + 1);  // A colocação começa em 1, por isso usamos i + 1
        }
        
        return resultado;
    }
    
    //Adiciona as medalhas aos Atletas de acordo com suas colocações.
    private void adicionarMedalhasColetivo(Map<Time, Integer> resultado){
        // Itera sobre o mapa de resultados (Time -> Colocação)
        for (Map.Entry<Time, Integer> entry : resultado.entrySet()) {
            Time time = entry.getKey(); // O time
            Integer colocacao = entry.getValue(); // A colocação do time

            // Verifica a colocação do time
            if (colocacao == 1) { // Ouro
                for (Atleta atleta : time.getAtletas()) {
                    GerenciadorInterfaceGrafica.getMyInstance().getGerDom().adicionarMedalha(atleta.getIdAtleta(), "ouro");
                }
            } else if (colocacao == 2) { // Prata
                for (Atleta atleta : time.getAtletas()) {
                    GerenciadorInterfaceGrafica.getMyInstance().getGerDom().adicionarMedalha(atleta.getIdAtleta(), "prata");
                }
            } else if (colocacao == 3) { // Bronze
                for (Atleta atleta : time.getAtletas()) {
                    GerenciadorInterfaceGrafica.getMyInstance().getGerDom().adicionarMedalha(atleta.getIdAtleta(), "bronze");
                }
            }
        }
    }
    
    private void adicionarMedalhasIndividual(Map<Atleta, Integer> resultado) {
        // Itera sobre o mapa de resultados (Atleta -> Colocação)
        for (Map.Entry<Atleta, Integer> entry : resultado.entrySet()) {
            Atleta atleta = entry.getKey(); // O atleta
            Integer colocacao = entry.getValue(); // A colocação do atleta

            // Verifica a colocação do atleta
            if (colocacao == 1) { // Ouro
                GerenciadorInterfaceGrafica.getMyInstance().getGerDom().adicionarMedalha(atleta.getIdAtleta(), "ouro");
            } else if (colocacao == 2) { // Prata
                GerenciadorInterfaceGrafica.getMyInstance().getGerDom().adicionarMedalha(atleta.getIdAtleta(), "prata");
            } else if (colocacao == 3) { // Bronze
                GerenciadorInterfaceGrafica.getMyInstance().getGerDom().adicionarMedalha(atleta.getIdAtleta(), "bronze");
            }
        }
    }
    
    private boolean validarCampos(Esporte esporte, List<Time> times, List<Atleta> atletas) {
        
       String msgErro = "";

       // Resetar cores dos labels
       lblLocal.setForeground(Color.black);
       lblData.setForeground(Color.black);
       lblCadastroTimes.setForeground(Color.black);
       lblAtletas.setForeground(Color.black);


       // Validar data
       if (txtDt.getText().trim().isEmpty()) {
           msgErro += "Informe a data do torneio.\n";
           lblData.setForeground(Color.red);
       } else {
           Date nascimento = FuncoesUteis.converterStringParaDate(txtDt.getText(), "dd/MM/yyyy");
           if (nascimento == null) {
               msgErro += "Data de nascimento inválida.\n";
               lblData.setForeground(Color.red);
           }
       }
       
       // Validar Local
       if (txtLocal.getText().trim().isEmpty()) {
           msgErro += "Digite o local.\n";
           lblLocal.setForeground(Color.red);
       }
       
       if(esporte.getTipo().equals("Coletivo")){
           if(times.isEmpty()){
               msgErro += "Adicione um time.\n";
               lblCadastroTimes.setForeground(Color.red);
           }
       }else{
           if(atletas.isEmpty()){
               msgErro += "Nenhum atleta inscrito :(\n";
               lblAtletas.setForeground(Color.red);
           }
       }

       // Exibir mensagens de erro ou retornar verdadeiro
       if (msgErro.isEmpty()) {
           return true;
       } else {
           JOptionPane.showMessageDialog(this, msgErro, "Erro de Validação", JOptionPane.ERROR_MESSAGE);
           return false;
       }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarTime;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGerar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JToggleButton btnResultados;
    private javax.swing.JComboBox<String> cmbEsporte;
    private javax.swing.JComboBox<String> cmbNacionalidade;
    private javax.swing.ButtonGroup grptipo;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAtletas;
    private javax.swing.JLabel lblCadastroTimes;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblEsporte;
    private javax.swing.JLabel lblLocal;
    private javax.swing.JLabel lblNome;
    private javax.swing.JPanel pnlcadastrartimes;
    private javax.swing.JPanel pnlinscreveratletas;
    private javax.swing.JPanel pnlstatus;
    private javax.swing.JRadioButton radioColetivo;
    private javax.swing.JRadioButton radioIndividual;
    private javax.swing.JTable tabelaAtletas;
    private javax.swing.JTable tabelaInscritos;
    private javax.swing.JTable tableTimes;
    private javax.swing.JFormattedTextField txtDt;
    private javax.swing.JTextField txtLocal;
    private javax.swing.JTextField txtNome;
    private javax.swing.JLabel txtStatus;
    private javax.swing.JLabel txtTitulo;
    // End of variables declaration//GEN-END:variables
}
